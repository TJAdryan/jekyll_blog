# azure-pipelines.yml #Check twice

# IMPORTANT: During troubleshooting, keep the 'trigger' commented out initially (Phase 1).
# Uncomment it only in Phase 6 after main is clean and the YAML is fully updated.
# trigger:
#   branches:
#     include:
#     - main

# Pool specifies the virtual machine image where the pipeline jobs will run.
pool:
  vmImage: 'ubuntu-latest'

# Variables, including linking a variable group.
variables:
  # Inline variables:
  - name: githubPagesBranch
    value: 'gh-pages'
  - name: jekyllOutputFolder
    value: '_site'
  - name: artifactName
    value: 'nextvaldata_site'


  # Link to your Variable Group.
  - group: nexvaldataBlogSecrets_update # Ensure 'nexvaldataBlogSecrets_update' is the exact name of your variable group.

# Stages define distinct phases of your pipeline.
stages:
- stage: BuildBlog
  displayName: 'Build Jekyll Blog'
  jobs:
  - job: BuildJob
    displayName: 'Build Static Site with Jekyll'
    steps:
    # Explicitly check out the source branch (main) with a clean workspace.
    - checkout: self
      clean: true
      displayName: 'Clean Checkout of Source Branch'

    - task: UseRubyVersion@0
      displayName: 'Use Ruby Version (for Jekyll)'
      inputs:
        versionSpec: '3.2'
        addToPath: true

    - script: |
        gem install bundler --no-document
        bundle install --jobs 4 --retry 3
      displayName: 'Install Jekyll Dependencies (Bundler)'

    - script: |
        bundle exec jekyll build --destination "$(Build.ArtifactStagingDirectory)/$(jekyllOutputFolder)"
      displayName: 'Run Jekyll Build'

    - publish: '$(Build.ArtifactStagingDirectory)/$(jekyllOutputFolder)'
      artifact: '$(artifactName)'
      displayName: 'Publish Website Artifact'

- stage: DeployToGitHubPages
  displayName: 'Deploy to GitHub Pages'
  dependsOn: BuildBlog
  condition: succeeded()

  jobs:
  - job: DeployJob # Changed from 'deployment' back to 'job'
    displayName: 'Push to GitHub Pages'
    # --- ENVIRONMENT REFERENCE REMOVED ---
    # environment: GitHub-Pages-Deploy  <--- REMOVED THIS LINE
    # strategy: # <--- THIS BLOCK IS NO LONGER NEEDED FOR A REGULAR 'job' TYPE
    #   runOnce:
    #     deploy:
    #       steps:
    # --- END ENVIRONMENT REFERENCE REMOVED ---
    steps: # Steps are directly under the 'job' for a regular job type
    - download: current
      artifact: '$(artifactName)'
      displayName: 'Download Built Site Artifact'

    - task: PowerShell@2
      displayName: 'Push to GitHub Pages'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "DEBUG: Starting deployment script."

          git config --global user.email "azure-devops@${env:BUILD_REPOSITORY_NAME}.com"
          git config --global user.name "Azure DevOps CD Pipeline"

          Write-Host "DEBUG: Value of githubPagesBranch variable: '$env:githubPagesBranch'"

          $repoUrl = "https://x-access-token:$($env:GITHUB_PAT)@github.com/$(Build.Repository.Name).git"
          $targetBranch = $env:githubPagesBranch
          $tempRepoDir = "temp_repo"

          Write-Host "DEBUG: Cloning repository '$repoUrl' into '$tempRepoDir'."

          $cloneResult = git clone --no-checkout --single-branch --branch $targetBranch $repoUrl $tempRepoDir 2>&1

          if ($LASTEXITCODE -ne 0) {
              Write-Host "DEBUG: Initial clone of '$targetBranch' failed. Trying to clone default branch and create '$targetBranch'."
              Remove-Item -LiteralPath $tempRepoDir -Force -Recurse -ErrorAction SilentlyContinue

              git clone --no-checkout --single-branch $repoUrl $tempRepoDir
              Set-Location $tempRepoDir
              git checkout -b $targetBranch
              Write-Host "DEBUG: Successfully created and checked out new branch '$targetBranch'."
              Set-Location ..

          } else {
              Set-Location $tempRepoDir
          }

          git checkout $targetBranch
          Write-Host "DEBUG: Final checkout to branch '$targetBranch' confirmed."

          Write-Host "DEBUG: Current branch after all operations:"
          git branch -vv
          Write-Host "DEBUG: Git status after branch operations:"
          git status
          Write-Host "DEBUG: Git remotes:"
          git remote -v

          Get-ChildItem -Path . -Force | Where-Object { $_.Name -ne '.git' } | Remove-Item -Recurse -Force
          Write-Host "DEBUG: Cleared '$tempRepoDir' directory contents."

          Copy-Item -Path "$env:PIPELINE_WORKSPACE\$env:artifactName\*" -Destination . -Recurse -Force
          Write-Host "DEBUG: Copied built site from artifact to '$tempRepoDir'."

          Write-Host "DEBUG: Git status after copying files:"
          git status

          git add .
          git commit -m "Azure DevOps CD: Deployed new blog content [skip ci]" || Write-Host "DEBUG: No changes to commit, skipping commit."

          Write-Host "DEBUG: Attempting to push to branch: $targetBranch"
          Write-Host "DEBUG: Push command output:"
          git push origin $targetBranch

          Set-Location ..
          Write-Host "DEBUG: Deployment script finished."
      env:
        GITHUB_PAT: $(GITHUB_PAT)
        githubPagesBranch: $(githubPagesBranch)
        artifactName: $(artifactName)
        PIPELINE_WORKSPACE: $(Pipeline.Workspace)