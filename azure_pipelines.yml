# azure-pipelines.yml

# This pipeline is triggered whenever changes are pushed to the 'main' branch.
trigger:
  - main

# Define the agent pool where the job will run.
pool:
  vmImage: 'ubuntu-latest'

# Define variables used throughout the pipeline.
variables:
  jekyllVersion: '4.4.1'
  rubyVersion: '3.2' # Changed to '3.2' for broader compatibility
  githubAuthToken: $(GITHUB_PAT) 

jobs:
- job: BuildAndDeployJekyll
  displayName: 'Build and Deploy Jekyll Site'
  
  steps:
  # Checkout your source code from the repository.
  - checkout: self
    persistCredentials: true 

  - task: UseRubyVersion@0
    displayName: 'Setup Ruby Environment'
    inputs:
      versionSpec: '$(rubyVersion)'
      addToPath: true

  - bash: |
      gem install bundler
    displayName: 'Install Bundler'

  - bash: |
      bundle install --jobs 4 --retry 3
    displayName: 'Install Jekyll and Dependencies'

  - bash: |
      bundle exec jekyll build --config _config.yml
    displayName: 'Build Jekyll Site'

  # Publish the generated '_site' directory as a build artifact (optional, but good for archiving).
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Artifacts'
    inputs:
      pathToPublish: '_site' # This publishes the _site folder
      artifactName: 'jekyll-site'
      publishLocation: 'Container' 

  # Deploy the built site to GitHub Pages.
  - bash: |
      git config user.name "Azure DevOps Pipeline"
      git config user.email "azure-devops@example.com"

      # Fetch the gh-pages branch into a local tracking branch.
      git fetch origin gh-pages:gh-pages
      
      # Checkout the gh-pages branch. This changes the content of the working directory.
      git checkout gh-pages
      
      # Remove all existing files from the gh-pages branch to ensure a clean deployment.
      git rm -rf .
      
      # Copy the newly built site content from the _site directory (relative to repo root)
      # to the current working directory (which is now the gh-pages branch's root).
      cp -r "_site/"* . 
      
      # Add all changes to the Git staging area.
      git add .
      
      # Commit the changes. '|| true' makes this step succeed even if no changes occurred.
      git commit -m "Azure DevOps Build: Deploying Jekyll site from main branch" || true
      
      # Push the updated gh-pages branch to GitHub using the PAT.
      git push "https://$(githubAuthToken)@github.com/TJAdryan/jekyll_blog.git" gh-pages
    displayName: 'Deploy to GitHub Pages'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    # !!! REMOVED THE FOLLOWING LINE !!!
    # workingDirectory: '$(Build.ArtifactStagingDirectory)/jekyll-site'