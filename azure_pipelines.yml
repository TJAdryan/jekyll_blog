# azure-pipelines.yml confirm change

# Trigger the pipeline on pushes to your content branch (e.g., 'main')
# IMPORTANT: During troubleshooting, keep this commented out initially (Phase 1).
# Uncomment it only in Phase 5 after main is clean and the YAML is fully updated.
# trigger:
#   branches:
#     include:
#     - main # Or 'master', 'source', 'develop', etc., where your Jekyll source lives

# Use a Microsoft-hosted agent for your build.
# For public projects, you get unlimited minutes on these agents!
pool:
  vmImage: 'ubuntu-latest' # A recent Ubuntu image with Ruby/Bundler typically available

# --- CORRECTED VARIABLES AND VARIABLE GROUP INDENTATION ---
# Variables for easy customization
variables:
  # The branch on your GitHub repository that GitHub Pages serves from.
  # THIS MUST BE 'gh-pages' for your custom build pipeline.
  githubPagesBranch: 'gh-pages'

  # The directory where Jekyll outputs the built static files.
  # By default, Jekyll outputs to '_site'.
  jekyllOutputFolder: '_site'

  # The name of the artifact that will contain your built website files.
  artifactName: 'nextvaldata_site'

  # Link to your Variable Group for secrets (like GITHUB_PAT)
  # IMPORTANT: Ensure 'GitHubSecrets' is the exact name of your variable group
  # where GITHUB_PAT is stored as a secret.
  group: GitHubSecrets
# --- END CORRECTED VARIABLES AND VARIABLE GROUP INDENTATION ---

## ... (rest of your pipeline YAML before the DeployToGitHubPages stage) ...

stages:
- stage: DeployToGitHubPages
  displayName: 'Deploy to GitHub Pages'
  dependsOn: BuildBlog
  condition: succeeded() # Only deploy if the build was successful

  jobs:
  - deployment: DeployJob # This is a deployment job type
    displayName: 'Push to GitHub Pages'
    environment: GitHub-Pages-Deploy # <--- Ensure this matches the name of your Environment
    strategy: # <--- THIS IS THE MISSING PIECE FOR DEPLOYMENT JOBS
      runOnce: # For simple, non-rolling deployments
        deploy:
          steps:
          - download: current
            artifact: '$(artifactName)'
            displayName: 'Download Built Site Artifact'

          # --- START OF CRITICAL DEPLOYMENT SCRIPT UPDATES ---
          - task: PowerShell@2
            displayName: 'Push to GitHub Pages'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "DEBUG: Starting deployment script."

                # Set Git user for the commit
                git config --global user.email "azure-devops@${env:BUILD_REPOSITORY_NAME}.com"
                git config --global user.name "Azure DevOps CD Pipeline"

                # --- Debugging the variable value ---
                Write-Host "DEBUG: Value of githubPagesBranch variable: '$env:githubPagesBranch'"

                # --- REVISED CLONING & CHECKOUT LOGIC ---
                $repoUrl = "https://x-access-token:$($env:GITHUB_PAT)@github.com/$(Build.Repository.Name).git"
                $targetBranch = $env:githubPagesBranch
                $tempRepoDir = "temp_repo"

                Write-Host "DEBUG: Cloning repository '$repoUrl' into '$tempRepoDir'."

                # Attempt to clone the specific branch directly.
                # If the branch doesn't exist, this command will fail.
                $cloneResult = git clone --no-checkout --single-branch --branch $targetBranch $repoUrl $tempRepoDir 2>&1

                if ($LASTEXITCODE -ne 0) {
                    Write-Host "DEBUG: Initial clone of '$targetBranch' failed. Trying to clone default branch and create '$targetBranch'."
                    Remove-Item -LiteralPath $tempRepoDir -Force -Recurse -ErrorAction SilentlyContinue # Clean up failed clone attempt

                    # Clone the default branch (usually 'main')
                    git clone --no-checkout --single-branch $repoUrl $tempRepoDir
                    Set-Location temp_repo # Ensure we are in the cloned repo
                    git checkout -b $targetBranch
                    Write-Host "DEBUG: Successfully created and checked out new branch '$targetBranch'."
                    Set-Location .. # Go back to root before setting location again

                } else { # If clone of specific branch succeeded
                    Set-Location temp_repo # Navigate into the successfully cloned repo
                }

                # Ensure we are on the correct branch, even if it was cloned initially
                git checkout $targetBranch
                Write-Host "DEBUG: Final checkout to branch '$targetBranch' confirmed."

                # --- Debugging the actual branch after clone/checkout ---
                Write-Host "DEBUG: Current branch after all operations:"
                git branch -vv
                Write-Host "DEBUG: Git status after branch operations:"
                git status
                Write-Host "DEBUG: Git remotes:"
                git remote -v

                # --- END REVISED CLONING & CHECKOUT LOGIC ---


                # Remove all existing files (except .git folder) to ensure a clean deploy.
                Get-ChildItem -Path . -Force | Where-Object { $_.Name -ne '.git' } | Remove-Item -Recurse -Force
                Write-Host "DEBUG: Cleared '$tempRepoDir' directory contents."

                # Copy the newly built site files from the artifact download directory
                Copy-Item -Path "$env:PIPELINE_WORKSPACE\$env:artifactName\*" -Destination . -Recurse -Force
                Write-Host "DEBUG: Copied built site from artifact to '$tempRepoDir'."

                # --- Debugging before commit ---
                Write-Host "DEBUG: Git status after copying files:"
                git status

                # Add all changes, commit, and push to the GitHub Pages branch
                git add .
                git commit -m "Azure DevOps CD: Deployed new blog content [skip ci]" || Write-Host "DEBUG: No changes to commit, skipping commit."

                # --- Debugging before push ---
                Write-Host "DEBUG: Attempting to push to branch: $targetBranch"
                Write-Host "DEBUG: Push command output:"
                git push origin $targetBranch

                Set-Location .. # Go back to the pipeline's root working directory
                Write-Host "DEBUG: Deployment script finished."
            env:
              GITHUB_PAT: $(GITHUB_PAT)
              githubPagesBranch: $(githubPagesBranch)
              artifactName: $(artifactName)
              PIPELINE_WORKSPACE: $(Pipeline.Workspace)
          # --- END OF CRITICAL DEPLOYMENT SCRIPT UPDATES ---