# azure-pipelines.yml
variables:
- group: GitHubSecrets # <-- This line links your variable group

# ... rest of your pipeline YAML ...

# Trigger the pipeline on pushes to your content branch (e.g., 'main')
trigger:
  branches:
    include:
    - main # Or 'master', 'source', 'develop', etc., where your Jekyll source lives

# Use a Microsoft-hosted agent for your build.
# For public projects, you get unlimited minutes on these agents!
pool:
  vmImage: 'ubuntu-latest' # A recent Ubuntu image with Ruby/Bundler typically available

# Variables for easy customization
variables:
  - group: nextvaldataBlogSecrets # Link the variable group here (just 'group: <group_name>')
  - name: githubPagesBranch
    value: 'gh-pages' # <--- IMPORTANT: Adjust this to your GitHub Pages source branch
  - name: jekyllOutputFolder
    value: '_site'
  - name: artifactName
    value: 'nextvaldata_site'
  - name: jekyllVersion # <--- CORRECTED: Now part of the list
    value: '4.4.1'
  - name: rubyVersion # <--- CORRECTED: Now part of the list
    value: '3.2'

# Stages define distinct phases of your pipeline (e.g., Build, Deploy)
stages:
- stage: BuildBlog
  displayName: 'Build Jekyll Blog'
  jobs:
  - job: BuildJob
    displayName: 'Build Static Site with Jekyll'
    steps:
    - task: UseRubyVersion@0
      displayName: 'Use Ruby Version (for Jekyll)'
      inputs:
        # Use the variable defined in the 'variables' section
        versionSpec: '$(rubyVersion)' 
        addToPath: true

    - script: |
        gem install bundler --no-document
        bundle install --jobs 4 --retry 3
      displayName: 'Install Jekyll Dependencies (Bundler)'

    - script: |
        bundle exec jekyll build --destination "$(Build.ArtifactStagingDirectory)/$(jekyllOutputFolder)"
      displayName: 'Run Jekyll Build'

    - publish: '$(Build.ArtifactStagingDirectory)/$(jekyllOutputFolder)'
      artifact: '$(artifactName)'
      displayName: 'Publish Website Artifact'

- stage: DeployToGitHubPages
  displayName: 'Deploy to GitHub Pages'
  dependsOn: BuildBlog
  condition: succeeded()

  jobs:
  - job: DeployJob
    displayName: 'Push to GitHub Pages'
    steps:
    - download: current
      artifact: '$(artifactName)'
      displayName: 'Download Built Site Artifact'

    - task: Bash@3
      displayName: 'Push to GitHub Pages'
      inputs:
        targetType: 'inline'
        script: |
          set -e
          git config --global user.email "azure-devops@$(Build.Repository.Name).com"
          git config --global user.name "Azure DevOps CD Pipeline"

          # Clone the GitHub repository into a temporary directory
          # Use the GITHUB_PAT for authentication.
          # Build.Repository.Name automatically gets the repo name (e.g., jekyll_blog)
          git clone https://x-access-token:$(GITHUB_PAT)@github.com/TJAdryan/$(Build.Repository.Name).git temp_repo 
          
          cd temp_repo

          git checkout $(githubPagesBranch) || git checkout -b $(githubPagesBranch)

          find . ! -path "./.git*" -maxdepth 1 -not -name ".git" -print0 | xargs -0 rm -rf

          # Copy from the artifact download location (which is $(Pipeline.Workspace)/$(artifactName))
          cp -r "$(Pipeline.Workspace)/$(artifactName)/." .

          git add .
          git commit -m "Azure DevOps CD: Deployed new blog content - $(Build.BuildId) [skip ci]"
          git push origin $(githubPagesBranch)
      env:
        # GITHUB_PAT is sourced from the variable group 'nextvaldataBlogSecrets'
        # which is linked at the top of the YAML.
        GITHUB_PAT: $(GITHUB_PAT)